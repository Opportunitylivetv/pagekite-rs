// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at http://mozilla.org/MPL/2.0/.

// automatically generated by rust-bindgen

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

use std::os::raw::{c_char, c_int, c_void};

pub type pagekite_callback_t = Option<unsafe extern "C" fn(arg1: c_int, arg2: *mut c_void) -> c_int>;

pub type pagekite_mgr = *mut c_void;
extern "C" {
    pub fn pagekite_init(app_id: *const c_char,
                         max_kites: c_int,
                         max_frontends: c_int,
                         max_conns: c_int,
                         dyndns_url: *const c_char,
                         flags: c_int,
                         verbosity: c_int)
                         -> pagekite_mgr;
    pub fn pagekite_init_pagekitenet(app_id: *const c_char,
                                     max_kites: c_int,
                                     max_conns: c_int,
                                     flags: c_int,
                                     verbosity: c_int)
                                     -> pagekite_mgr;
    pub fn pagekite_init_whitelabel(app_id: *const c_char,
                                    max_kites: c_int,
                                    max_conns: c_int,
                                    flags: c_int,
                                    verbosity: c_int,
                                    whitelabel_tld: *const c_char)
                                    -> pagekite_mgr;
    pub fn pagekite_add_kite(arg1: pagekite_mgr,
                             proto: *const c_char,
                             kitename: *const c_char,
                             pport: c_int,
                             secret: *const c_char,
                             backend: *const c_char,
                             lport: c_int)
                             -> c_int;
    pub fn pagekite_add_service_frontends(arg1: pagekite_mgr, flags: c_int) -> c_int;
    pub fn pagekite_add_whitelabel_frontends(arg1: pagekite_mgr,
                                             flags: c_int,
                                             whitelabel_tld: *const c_char)
                                             -> c_int;
    pub fn pagekite_lookup_and_add_frontend(arg1: pagekite_mgr,
                                            domain: *const c_char,
                                            port: c_int,
                                            update_from_dns: c_int)
                                            -> c_int;
    pub fn pagekite_add_frontend(arg1: pagekite_mgr, domain: *const c_char, port: c_int) -> c_int;
    pub fn pagekite_set_log_mask(arg1: pagekite_mgr, mask: c_int) -> c_int;
    pub fn pagekite_set_housekeeping_min_interval(arg1: pagekite_mgr, interval: c_int) -> c_int;
    pub fn pagekite_set_housekeeping_max_interval(arg1: pagekite_mgr, interval: c_int) -> c_int;
    pub fn pagekite_enable_http_forwarding_headers(arg1: pagekite_mgr, enable: c_int) -> c_int;
    pub fn pagekite_enable_fake_ping(arg1: pagekite_mgr, enable: c_int) -> c_int;
    pub fn pagekite_enable_watchdog(arg1: pagekite_mgr, enable: c_int) -> c_int;
    pub fn pagekite_enable_tick_timer(arg1: pagekite_mgr, enable: c_int) -> c_int;
    pub fn pagekite_set_conn_eviction_idle_s(arg1: pagekite_mgr, seconds: c_int) -> c_int;
    pub fn pagekite_set_openssl_ciphers(arg1: pagekite_mgr, ciphers: *const c_char) -> c_int;
    pub fn pagekite_want_spare_frontends(arg1: pagekite_mgr, spares: c_int) -> c_int;
    pub fn pagekite_thread_start(arg1: pagekite_mgr) -> c_int;
    pub fn pagekite_thread_wait(arg1: pagekite_mgr) -> c_int;
    pub fn pagekite_thread_stop(arg1: pagekite_mgr) -> c_int;
    pub fn pagekite_free(arg1: pagekite_mgr) -> c_int;
    pub fn pagekite_get_status(arg1: pagekite_mgr) -> c_int;
    pub fn pagekite_get_log(arg1: pagekite_mgr) -> *mut c_char;
    pub fn pagekite_dump_state_to_log(arg1: pagekite_mgr) -> c_int;
    pub fn pagekite_poll(arg1: pagekite_mgr, timeout: c_int) -> c_int;
    pub fn pagekite_tick(arg1: pagekite_mgr) -> c_int;
    pub fn pagekite_set_bail_on_errors(arg1: pagekite_mgr, errors: c_int) -> c_int;
    pub fn pagekite_perror(arg1: pagekite_mgr, arg2: *const c_char);
    pub fn pagekite_add_listener(arg1: pagekite_mgr,
                                 domain: *const c_char,
                                 port: c_int,
                                 callback_func: pagekite_callback_t,
                                 callback_data: *mut c_void)
                                 -> c_int;
    pub fn pagekite_enable_lua_plugins(arg1: pagekite_mgr,
                                       enable_defaults: c_int,
                                       settings: *mut *mut c_char)
                                       -> c_int;
}
